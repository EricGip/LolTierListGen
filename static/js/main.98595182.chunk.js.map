{"version":3,"sources":["reorder.tsx","AuthorList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["reorder","list","startIndex","endIndex","result","Array","from","splice","removed","useStyles","makeStyles","theme","Paper","display","flexWrap","margin","spacing","width","height","Button","left","Textfield","AuthorList","listId","listType","row","onUp","onDown","onLabelChange","classes","style","alignItems","TextField","className","id","generate","label","variant","value","onChange","e","target","color","onClick","droppableId","type","direction","isCombineEnabled","dropProvided","droppableProps","flex","backgroundColor","minHeight","overflowX","ref","innerRef","urls","map","url","index","key","draggableId","dragProvided","placeholder","aId","App","React","useState","top","jungle","mid","ad","support","rows","setRows","onDragEnd","destination","source","current","find","x","next","reordered","reorderRows","AppBar","position","Toolbar","disabled","Tooltip","title","IconButton","aria-label","edge","href","right","fontSize","overflow","i","newText","internalScroll","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yyjBAIaA,EAAU,SACrBC,EACAC,EACAC,GAEA,IAAMC,EAASC,MAAMC,KAAKL,GADhB,EAIQG,EAAOG,OAAOL,EAAY,GAArCM,EAJG,oBAQV,OAFAJ,EAAOG,OAAOJ,EAAU,EAAGK,GAEpBJ,G,oFCNHK,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,MAAO,CACLC,QAAS,OACTC,SAAU,OACV,QAAS,CACPC,OAAQJ,EAAMK,QAAQ,IACtBC,MAAON,EAAMK,QAAQ,IACrBE,OAAQP,EAAMK,QAAQ,MAG1BG,OAAQ,CACN,QAAS,CACPF,MAAO,KACPC,OAAQP,EAAMK,QAAQ,GACtBI,KAAM,MAGVC,UAAW,CACT,QAAS,CACPN,OAAQJ,EAAMK,QAAQ,GACtBC,MAAO,OACPC,OAAQ,YAgBDI,EAA8B,SAAC,GAOrC,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,SACAC,EAII,EAJJA,IACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,OACAC,EACI,EADJA,cAEMC,EAAUpB,IAEhB,OACE,yBAAKqB,MAAO,CAAEjB,QAAS,OAAQkB,WAAY,WACzC,6BACE,6BACE,kBAACC,EAAA,EAAD,CACEC,UAAWJ,EAAQR,UACnBa,GAAIC,qBACJC,MAAM,YACNC,QAAQ,WACRC,MAAOb,EAAIW,MACXG,SAAU,SAAAC,GAAC,OAAIZ,EAAcY,EAAEC,OAAOH,WAI1C,6BACE,kBAACnB,EAAA,EAAD,CACEc,UAAWJ,EAAQV,OACnBkB,QAAQ,WACRK,MAAM,UACNC,QAASjB,GAJX,gBAUF,6BACE,kBAACP,EAAA,EAAD,CACEc,UAAWJ,EAAQV,OACnBkB,QAAQ,WACRK,MAAM,UACNC,QAAShB,GAJX,mBAWJ,kBAAC,IAAD,CACEiB,YAAarB,EACbsB,KAAMrB,EACNsB,UAAU,aACVC,kBAAkB,IAEjB,SAAAC,GAAY,OACX,yCACMA,EAAaC,eADnB,CAEEnB,MAAO,CACLoB,KAAM,EACNrC,QAAS,OACTsC,gBAAiB,UACjBpC,OAAQ,GACRqC,UAAW,GACXC,UAAW,QAEbC,IAAKN,EAAaO,WAEjB9B,EAAI+B,KAAKC,KAAI,SAACC,EAAKC,GAAN,OACZ,kBAAC,IAAD,CAAWC,IAAKF,EAAKG,YAAaH,EAAKC,MAAOA,IAC3C,SAAAG,UAqBJd,EAAae,kB,qDCtHpBC,EAAM7B,qBAwJG8B,MApJf,WAAgB,IAAD,EACWC,IAAMC,SAAS,CACrC,CAAEjC,GAAI8B,EAAK5B,MAAO,GAAIoB,KAAM,IAC5B,CACEtB,GAAIC,qBACJC,MAAO,MACPoB,KAAMY,GAER,CACElC,GAAIC,qBACJC,MAAO,SACPoB,KAAMa,GAER,CACEnC,GAAIC,qBACJC,MAAO,SACPoB,KAAMc,GAER,CACEpC,GAAIC,qBACJC,MAAO,SACPoB,KAAMe,GAER,CACErC,GAAIC,qBACJC,MAAO,UACPoB,KAAMgB,KA1BG,mBACNC,EADM,KACAC,EADA,KA8Bb,OACE,kBAAC,IAAD,CACEC,UAAW,YAA8B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OACpBD,GAILF,EFxCmB,SACzBD,EACAI,EACAD,GAIA,IAAME,EAAUL,EAAKM,MAAK,SAAAC,GAAC,OAAIA,EAAE9C,KAAO2C,EAAOjC,eAEzCqC,EAAOR,EAAKM,MAAK,SAAAC,GAAC,OAAIA,EAAE9C,KAAO0C,EAAYhC,eAC3CH,EAASqC,EAAQtB,KAAKqB,EAAOlB,OAEnC,GAAIkB,EAAOjC,cAAgBgC,EAAYhC,YAAa,CAClD,IAAMsC,EAAYlF,EAAQ8E,EAAQtB,KAAMqB,EAAOlB,MAAOiB,EAAYjB,OAGlE,OAAOc,EAAKhB,KAAI,SAAAuB,GAAC,OAAKA,EAAE9C,KAAO4C,EAAQ5C,GAAjB,2BAA2B8C,GAA3B,IAA8BxB,KAAM0B,IAAcF,KAS1E,OAJAF,EAAQtB,KAAKjD,OAAOsE,EAAOlB,MAAO,GAElCsB,EAAKzB,KAAKjD,OAAOqE,EAAYjB,MAAO,EAAGlB,GAEhCgC,EAAKhB,KAAI,SAAAuB,GACd,OAAIF,EAAQ5C,KAAO8C,EAAE9C,GACZ,2BACF8C,GADL,IAEExB,KAAMsB,EAAQtB,OAEPyB,EAAK/C,KAAO8C,EAAE9C,GAChB,2BACF8C,GADL,IAEExB,KAAMyB,EAAKzB,OAIRwB,KEEKG,CAAYV,EAAMI,EAAQD,MAGpC,yBACE9C,MAAO,CAELqB,gBAAiB,YAGnB,kBAACiC,EAAA,EAAD,CACEC,SAAS,SACTvD,MAAO,CACLqB,gBAAiB,YAGnB,kBAACmC,EAAA,EAAD,KACE,kBAACnE,EAAA,EAAD,CACEkB,QAAQ,YACRkD,UAAQ,EACRzD,MAAO,CACLY,MAAO,UACP2C,SAAU,WACVjE,KAAM,MANV,yCAYA,kBAACY,EAAA,EAAD,CACEI,MAAM,kBACNC,QAAQ,WACRP,MAAO,CACLY,MAAO,UACPzB,MAAO,QACPF,OAAQ,UAIZ,kBAACyE,EAAA,EAAD,CAASC,MAAM,mBACb,kBAACC,EAAA,EAAD,CACEC,aAAW,QACXC,KAAK,MACLC,KAjFD,6BAkFCpD,OAAO,UAEP,kBAAC,IAAD,CACEX,MAAO,CACLY,MAAO,UACP2C,SAAU,WACVS,MAAO,MACPC,SAAU,GACVC,SAAU,cAStB,kBAAC7E,EAAA,EAAD,CACEW,MAAO,CACLY,MAAO,UACP3B,OAAQ,IAEVsB,QAAQ,WACRK,MAAM,UACNC,QAAS,WACP+B,EAAQ,CACN,CACExC,GAAIC,qBACJC,MAAO,GACPoB,KAAM,KAJH,mBAMFiB,OAdT,WAqBCA,EAAKhB,KAAI,SAAChC,EAAKwE,GAAN,OACR,kBAAC,EAAD,CAEErE,cAAe,SAAAsE,GAAO,OAEpBxB,EAEED,EAAKhB,KAAI,SAAAuB,GAAC,OAERA,EAAE9C,KAAOT,EAAIS,GAAb,2BAAuBT,GAAvB,IAA4BW,MAAO8D,IAAYlB,OAKrDtD,KAAM,kBAAMgD,EAAQ1E,EAAQyE,EAAMwB,EAAGA,EAAI,KAEzCtE,OAAQ,kBAAM+C,EAAQ1E,EAAQyE,EAAMwB,EAAGA,EAAI,KAE3CE,gBAAc,EACdvC,IAAKnC,EAAIS,GACTX,OAAQE,EAAIS,GACZV,SAAS,OACTC,IAAKA,UCtJG2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDoIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.98595182.chunk.js","sourcesContent":["import { DraggableLocation } from \"react-beautiful-dnd\";\nimport { Row } from \"./types\";\n\n\nexport const reorder = (\n  list: any[],\n  startIndex: number,\n  endIndex: number\n): any[] => {\n  const result = Array.from(list);\n\n\n  const [removed] = result.splice(startIndex, 1);\n\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport const reorderRows = (\n  rows: Row[],\n  source: DraggableLocation,\n  destination: DraggableLocation\n) => {\n\n\n  const current = rows.find(x => x.id === source.droppableId)!;\n\n  const next = rows.find(x => x.id === destination.droppableId)!;\n  const target = current.urls[source.index];\n\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current.urls, source.index, destination.index);\n\n\n    return rows.map(x => (x.id === current.id ? { ...x, urls: reordered } : x));\n  }\n\n  // moving to different list\n\n  current.urls.splice(source.index, 1);\n  // insert into next\n  next.urls.splice(destination.index, 0, target);\n\n  return rows.map(x => {\n    if (current.id === x.id) {\n      return {\n        ...x,\n        urls: current.urls\n      };\n    } else if (next.id === x.id) {\n      return {\n        ...x,\n        urls: next.urls\n      };\n    }\n\n    return x;\n  });\n\n};\n","import React from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Row } from \"./types\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { Avatar } from \"@material-ui/core\";\nimport { generate } from \"shortid\";\n\nconst useStyles = makeStyles(theme => ({\n  Paper: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(0.5),\n      width: theme.spacing(16),\n      height: theme.spacing(10)\n    }\n  },\n  Button: {\n    \"& > *\": {\n      width: \"em\",\n      height: theme.spacing(2),\n      left: \"1\"\n    }\n  },\n  Textfield: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n      height: \"5ch\"\n    }\n  }\n}));\n\ninterface Props {\n  row: Row;\n  listId: string;\n  listType?: string;\n  internalScroll?: boolean;\n  isCombineEnabled?: boolean;\n  onUp: () => void;\n  onDown: () => void;\n  onLabelChange: (newText: string) => void;\n}\n\nexport const AuthorList: React.FC<Props> = ({\n  listId,\n  listType,\n  row,\n  onUp,\n  onDown,\n  onLabelChange\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      <div>\n        <div>\n          <TextField\n            className={classes.Textfield}\n            id={generate()}\n            label=\"Tier Name\"\n            variant=\"outlined\"\n            value={row.label}\n            onChange={e => onLabelChange(e.target.value)}\n          />\n        </div>\n\n        <div>\n          <Button\n            className={classes.Button}\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={onUp}\n          >\n            Move Row Up\n          </Button>\n        </div>\n\n        <div>\n          <Button\n            className={classes.Button}\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={onDown}\n          >\n            Move Row Down\n          </Button>\n        </div>\n      </div>\n\n      <Droppable\n        droppableId={listId}\n        type={listType}\n        direction=\"horizontal\"\n        isCombineEnabled={false}\n      >\n        {dropProvided => (\n          <div\n            {...dropProvided.droppableProps}\n            style={{\n              flex: 1,\n              display: \"flex\",\n              backgroundColor: \"#DCDCDC\",\n              margin: 20,\n              minHeight: 60,\n              overflowX: \"auto\"\n            }}\n            ref={dropProvided.innerRef}\n          >\n            {row.urls.map((url, index) => (\n              <Draggable key={url} draggableId={url} index={index}>\n                {dragProvided => (\n                  // inside this div this is what renders\n\n                  <div\n                    {...dragProvided.dragHandleProps}\n                    {...dragProvided.draggableProps}\n                    ref={dragProvided.innerRef}\n                  >\n                    <Avatar\n                      style={{\n                        height: \"60px\",\n                        width: \"60px\"\n                      }}\n                      src={url}\n                    >\n\n                    </Avatar>\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {dropProvided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { reorderRows, reorder } from \"./reorder\";\n\nimport top from \"./data/top.json\";\nimport jungle from \"./data/jungle.json\";\nimport mid from \"./data/mid.json\";\nimport ad from \"./data/ad.json\";\nimport support from \"./data/support.json\";\n\nimport { AuthorList } from \"./AuthorList\";\nimport { generate } from \"shortid\";\nimport Button from \"@material-ui/core/Button\";\nimport { AppBar, Toolbar, TextField, IconButton } from \"@material-ui/core\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\n\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nconst aId = generate();\n\nconst GitHub = \"https://github.com/EricGip\";\n\nfunction App() {\n  const [rows, setRows] = React.useState([\n    { id: aId, label: \"\", urls: [] },\n    {\n      id: generate(),\n      label: \"Top\",\n      urls: top\n    },\n    {\n      id: generate(),\n      label: \"Jungle\",\n      urls: jungle\n    },\n    {\n      id: generate(),\n      label: \"Middle\",\n      urls: mid\n    },\n    {\n      id: generate(),\n      label: \"Bottom\",\n      urls: ad\n    },\n    {\n      id: generate(),\n      label: \"Support\",\n      urls: support\n    }\n  ]);\n\n  return (\n    <DragDropContext\n      onDragEnd={({ destination, source }) => {\n        if (!destination) {\n          return;\n        }\n\n        setRows(reorderRows(rows, source, destination));\n      }}\n    >\n      <div\n        style={{\n          // #89CFF0 #DCDCDC\n          backgroundColor: \"#89CFF0\"\n        }}\n      >\n        <AppBar\n          position=\"static\"\n          style={{\n            backgroundColor: \"#a19fa4\"\n          }}\n        >\n          <Toolbar>\n            <Button\n              variant=\"contained\"\n              disabled\n              style={{\n                color: \"#b9f2ff\",\n                position: \"absolute\",\n                left: \"1\"\n              }}\n            >\n              League of Legends Tier List Generator\n            </Button>\n\n            <TextField\n              label=\"Tier List Title\"\n              variant=\"outlined\"\n              style={{\n                color: \"inherit\",\n                width: \"500px\",\n                margin: \"auto\"\n              }}\n            />\n\n            <Tooltip title=\"Links to GitHub\">\n              <IconButton\n                aria-label=\"hello\"\n                edge=\"end\"\n                href={GitHub}\n                target=\"_blank\"\n              >\n                <GitHubIcon\n                  style={{\n                    color: \"#89CFF0\",\n                    position: \"absolute\",\n                    right: \"5px\",\n                    fontSize: 50,\n                    overflow: \"auto\"\n                  }}\n                />\n              </IconButton>\n            </Tooltip>\n          </Toolbar>\n\n        </AppBar>\n\n        <Button\n          style={{\n            color: \"inherit\",\n            margin: 15\n          }}\n          variant=\"outlined\"\n          color=\"inherit\"\n          onClick={() => {\n            setRows([\n              {\n                id: generate(),\n                label: \"\",\n                urls: []\n              },\n              ...rows\n            ]);\n          }}\n        >\n          add row\n        </Button>\n\n        {rows.map((row, i) => (\n          <AuthorList\n\n            onLabelChange={newText =>\n\n              setRows(\n\n                rows.map(x =>\n\n                  x.id === row.id ? { ...row, label: newText } : x\n                )\n              )\n            }\n\n            onUp={() => setRows(reorder(rows, i, i - 1))}\n\n            onDown={() => setRows(reorder(rows, i, i + 1))}\n\n            internalScroll\n            key={row.id}\n            listId={row.id}\n            listType=\"CARD\"\n            row={row}\n          />\n        ))}\n      </div>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}